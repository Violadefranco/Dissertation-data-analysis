import pandas as pd
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
file_path = "adjusted_new_sample_data_3.xlsx"
df_data = pd.read_excel(file_path, sheet_name="Foglio1")

# Rename columns for easier handling
df_data.columns = ["Group", "Economic_Growth", "National_Duty"]

# Filter dataset to only include Treatment Group 1 and Treatment Group 2
df_treatment_comparison = df_data[df_data["Group"].isin([1, 2])]

# Define independent variable (X) and dependent variables (Y1 and Y2)
X = df_treatment_comparison[["Group"]]  # Independent variable (Treatment 1 vs. Treatment 2)
Y1 = df_treatment_comparison["Economic_Growth"]  # First dependent variable
Y2 = df_treatment_comparison["National_Duty"]  # Second dependent variable

# Function to perform regression and print results
def run_regression(X, Y, dependent_var_name):
    # Add constant for intercept
    X_with_const = sm.add_constant(X)
    
    # Fit the model using statsmodels
    model = sm.OLS(Y, X_with_const).fit()
    
    # Split data into training and testing sets
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
    
    # Train using sklearn Linear Regression
    reg = LinearRegression()
    reg.fit(X_train, Y_train)
    Y_pred = reg.predict(X_test)
    
    # Print statsmodels summary
    print(f"Regression Results for {dependent_var_name}:")
    print(model.summary())
    
    # Print sklearn evaluation metrics
    print(f"\nSklearn Regression Metrics for {dependent_var_name}:")
    print(f"Mean Squared Error: {mean_squared_error(Y_test, Y_pred):.4f}")
    print(f"R-squared: {r2_score(Y_test, Y_pred):.4f}")
    print("-" * 60)

# Run regressions for both dependent variables
run_regression(X, Y1, "Economic Growth (Treatment 1 vs. Treatment 2)")
run_regression(X, Y2, "National Duty (Treatment 1 vs. Treatment 2)")
